/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC_PREVIOUS {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/FastQC_previous" }
            mode: params.publish_dir_mode
            saveAs: { filename -> filename.endsWith('.html') ? filename : null }
        ]
    }

    withName: FASTP {
        publishDir = [
            path: { "${params.outdir}/FastP" }
            mode: params.publish_dir_mode
            saveAs: { filename ->
                        if ( params.save_trimmed_reads && filename.endsWith('.fastq.gz') ) "trimmed_sequences/$filename"
                        else if ( filename.endsWith(".html") or filename.endsWith(".log") or filename.endsWith(".json") ) filename }
        ]
    }

   withName: FASTQC_POSTERIOR {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/FastQC_posterior" }
            mode: params.publish_dir_mode
            saveAs: { filename -> filename.endsWith('.html') ? filename : null }
        ]
    }
    
    withName: KRAKEN2_SCOUTING {
        publishDir = [
            path: { "${params.outdir}/Kraken2_scouting" }
            mode: params.publish_dir_mode
            saveAs: { filename ->
                        if ( filename.endsWith('report.txt') or filename.endsWith('classifiedreads.txt') ) filename }
        ]
    }

    withName: KRONA_KTIMPORTTAXONOMY { 
        publishDir = [
            path: {"${params.outdir}/Kraken2_scouting"}
            mode: params.publish_dir_mode
            saveAs: { filename -> filename.equals('versions.yml') ? null : "krona_plots/$filename" }
        ]
    }

    withName: KRAKEN2_HOST_REMOVAL {
        publishDir = [
            path: {"${params.outdir}/Kraken2_host_removal"}
            mode: params.publish_dir_mode
            saveAs: { filename -> 
                        if ( filename.endsWith('report.txt') or filename.endsWith('classifiedreads.txt') ) filename
                        else if ( filename.contains('unclassified') ) "host_removed_reads/$filename" }
                ]
        } 

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
